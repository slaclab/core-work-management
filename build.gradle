import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.adarshr.test-logger' version '4.0.0'
    id 'jacoco'
    id "org.openapi.generator" version "7.2.0"
}

group = 'edu.stanford.slac'
version = '1.0.0'
ext {
    ad_eed_baselib_version = "0.1.87"
    ad_eed_base_mongodb_lib_version = "1.0.8"
    javaSourceCompatibility = JavaVersion.VERSION_21
    javaTargetCompatibility = JavaVersion.VERSION_21
}

java {
    sourceCompatibility = javaSourceCompatibility
    targetCompatibility = javaTargetCompatibility
}

springBoot {
    buildInfo {
        {
            properties {
                additional = [
                        'ad-eed-baselib'     : "${project.ext.ad_eed_baselib_version}",
                        'ad-eed-base-mongodb': "${project.ext.ad_eed_base_mongodb_lib_version}"
                ]
            }
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url = uri("https://maven.pkg.github.com/eed-web-application/slac-ad-eed-baselib")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GH_USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("GH_TOKEN")
        }
    }
    maven {
        url = uri("https://maven.pkg.github.com/eed-web-application/slac-ad-eed-base-mongodb-lib")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GH_USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("GH_TOKEN")
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-test',
            'org.springframework.boot:spring-boot-starter-web',
            'org.springframework.boot:spring-boot-starter-security',
            'org.springframework.boot:spring-boot-starter-validation',
            'org.springframework.boot:spring-boot-starter-actuator',
            'org.springframework.boot:spring-boot-starter-data-ldap',
            'org.springframework.boot:spring-boot-starter-validation',
            'org.springframework.kafka:spring-kafka:3.1.4',
            'net.coobird:thumbnailator:0.4.20',
            'com.unboundid:unboundid-ldapsdk:7.0.1',
            'io.micrometer:micrometer-registry-prometheus',
            'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0',
            'org.springdoc:springdoc-openapi-starter-webflux-ui:2.5.0',
            'io.swagger.core.v3:swagger-annotations:2.2.22',
            'org.mapstruct:mapstruct:1.5.5.Final',
            'org.apache.commons:commons-pool2:2.12.0'

    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    // pdfbox
    implementation 'org.apache.pdfbox:pdfbox:3.0.3'

    // tika
    implementation 'org.overviewproject:mime-types:2.0.0'
    implementation 'org.apache.tika:tika-core:2.9.2'
    implementation 'org.apache.tika:tika-parsers-standard-package:2.9.2'

    // groovy
    implementation 'org.springframework.integration:spring-integration-groovy:6.3.2'

    // hazelcast
    implementation 'com.hazelcast:hazelcast-spring:5.3.8'

    //eed library
    implementation "edu.stanford.slac:slac-ad-eed-baselib:$project.ext.ad_eed_baselib_version",
            "edu.stanford.slac:slac-ad-eed-base-mongodb-lib:$project.ext.ad_eed_base_mongodb_lib_version"
    // MongoDB
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    // mongock
    implementation 'io.mongock:mongock-bom:5.4.4',
            'io.mongock:mongock-springboot-v3:5.4.1',
            'io.mongock:mongodb-springdata-v4-driver:5.4.4'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.awaitility:awaitility:4.2.1'
    testImplementation 'org.apache.pdfbox:pdfbox:3.0.2'
    testImplementation 'com.github.javafaker:javafaker:1.0.2'
    testImplementation 'org.awaitility:awaitility:4.2.1'
}

task buildCISAPI(type: GenerateTask) {
    generatorName = "java"
    inputSpec = "$rootDir/external-service/cis-api.json".toString()
    outputDir = "$rootDir/build/generated".toString()
    apiPackage = "edu.stanford.slac.core_work_management.cis_api.api"
    invokerPackage = "edu.stanford.slac.core_work_management.cis_api.invoker"
    modelPackage = "edu.stanford.slac.core_work_management.cis_api.dto"
    configOptions = [
            dateLibrary            : "java8-localdatetime",
            generateClientAsBean   : "true",
            hideGenerationTimestamp: "true",
            generateAliasAsModel   : "false",
            openApiNullable        : "false",
    ]
    library = "resttemplate"
    skipValidateSpec = true
    logToStderr = true
    generateAliasAsModel = false
    enablePostProcessFile = false
    generateModelDocumentation = false
    generateApiTests = false
    generateApiDocumentation = false
}

task buildElogAPI(type: GenerateTask) {
    generatorName = "java"
    inputSpec = "$rootDir/external-service/elog.json".toString()
    outputDir = "$rootDir/build/generated".toString()
    apiPackage = "edu.stanford.slac.core_work_management.elog_api.api"
    invokerPackage = "edu.stanford.slac.core_work_management.elog_api.invoker"
    modelPackage = "edu.stanford.slac.core_work_management.elog_api.dto"
    configOptions = [
            dateLibrary            : "java8-localdatetime",
            generateClientAsBean   : "true",
            hideGenerationTimestamp: "true",
            generateAliasAsModel   : "false",
            openApiNullable        : "false",
    ]
    library = "resttemplate"
    skipValidateSpec = true
    logToStderr = true
    generateAliasAsModel = false
    enablePostProcessFile = false
    generateModelDocumentation = false
    generateApiTests = false
    generateApiDocumentation = false
}

sourceSets {
    getByName("main") {
        java {
            srcDir("$buildDir/generated/src/main/java")
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

jacoco {
    reportsDirectory = layout.buildDirectory.dir('coverage')
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
    exclude '**/cis_api/**', '**/elog_api/**'
    // Configure test logging
    testLogging {
        // Show standard output and error streams only for failed tests
        showStandardStreams = false
        // Set the format for the exception stack trace
        exceptionFormat = 'full'
        // Log events for failed     and skipped tests
        events 'failed', 'skipped'
    }

    // Customize the logging for test results
    afterTest { descriptor, result ->
        if (result.resultType != TestResult.ResultType.SUCCESS) {
            logger.lifecycle("Test: ${descriptor.name} - Result: ${result.resultType}")
            if (result.exception != null) {
                logger.error("Test exception: ", result.exception)
            }
            // Log standard output and error only for failed tests
            def standardOutput = descriptor.testClass.testOutput.getStandardOutput()
            def standardError = descriptor.testClass.testOutput.getStandardError()
            if (standardOutput) {
                logger.lifecycle("Standard Output: \n${standardOutput}")
            }
            if (standardError) {
                logger.lifecycle("Standard Error: \n${standardError}")
            }
        }
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/dto/*', '**/cis_api/**']) // Adjust the pattern to match your DTOs
        }))
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/dto/*', '**/cis_api/**']) // Adjust the pattern to match your DTOs
        }))
    }
}

testlogger {
    theme 'standard'
    showExceptions true
    showStackTraces true
    showFullStackTraces true
    showCauses true
    slowThreshold 2000
    showSummary true
    showSimpleNames false
    showPassed true
    showSkipped true
    showFailed true
    showOnlySlow false
//    showStandardStreams true
    showPassedStandardStreams false
    showSkippedStandardStreams false
    showFailedStandardStreams true
    logLevel 'lifecycle'
}

compileJava.dependsOn buildCISAPI
compileJava.dependsOn buildElogAPI

assemble.doLast {
    println "built app version: ${project.version}"
}